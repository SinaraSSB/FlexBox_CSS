/* O primeiro estilo a aplicar é no seletor do header, onde colocaremos 
um max-width de var(--max-width-block), que limitará o espaço que esse cabeçalho pode ocupar, 
permitindo o uso de margin: 0 auto, que centralizará o cabeçalho. */

.header {
    margin: 0 auto;
    max-width: var(--max-width-block);
}

/* o seletor de nav__list com os seguintes atributos:
Um display: flex, posicionando os itens da lista lado a lado;
Um gap: var(--gap-xl), espaçando os itens entre si 
(a variável foi retirada do Figma  --gap-xl: 3.5rem;);
Um justify-content: space-between, definindo que os itens serão posicionados 
na largura definida no cabeçalho, tendo o mesmo espaço entre si;
Um align-items: center para alinhas todos os itens dentro do flex-container ao centro;
Um padding de var(--padding-s) 0 para implementar o espaçamento na parte superior 
e inferior do cabeçalho, mas não nas laterais.
Um list-style-type: none para remover o círculo à direita dos itens da lista e, remove (marcadores) dos elementos <li>
Um flex-wrap: wrap, propriedade do Flexbox que permite a quebra de linha dentro do elemento,
 fazendo com que todos caibam na janela do navegador. */

.nav__list {
    background-color: bisque;
    display: flex;
    gap: var(--gap-xl);
    justify-content: space-between;
    align-items: center;
    padding: var(--padding-s);
    list-style-type: none;
    flex-wrap: wrap;
}

/* O seletor de nav__link
São vários estilos de texto, com os quais removemos a decoração padrão dos links
 (a linha abaixo do texto), definimos uma cor específica (preta) e ajustamos 
 a fonte para seguir o padrão da aplicação, além de definir o tamanho e o peso da fonte. */

 .nav__link {
    text-decoration: none;
    color: var(--cor-texto);
    font-family: var(--fonte-texto);
    font-size: var(--font-size-m);
    font-weight: 400;
}

/* 
adicionaremos o seletor do nav__input para a lista de localização, que terá:

Um width: 100% para ocupar 100% do espaço disponível no contêiner;
Um border-radius: 0.5rem para arredondar as bordas;
Um border: none para remover as bordas;
Um background-color: var(--cor-de-fundo-input) para adicionar a cor cinza-claro ao fundo, tornando-o mais discreto;
Um padding: var(--padding-s) para aumentar o espaço interno do campo e facilitar a visualização;
Um background-image: url("../images/location_on.svg") para adicionar o ícone de localização dentro do campo;
Um background-repeat: no-repeat para que o ícone só apareça uma vez e
Um background-position: 95% center posicionando o ícone próximo ao final do campo, à direita, e centralizado na vertical. */

.nav__input {
    width: 100%;
    border-radius: 0.5rem;
    border: none;
    background-color: var(--cor-de-fundo-input);
    padding: var(--padding-s);
    background-image: url("../images/location_on.svg");
    background-repeat: no-repeat;
    background-position: 95% center;
}

/* No Figma, o input ocupa um espaço maior e o menu hambúrguer não aparece no desktop. 
Adicionando o seletor do menu__toggle, removeremos o menu hambúrguer com display: none. */

.menu__toggle {
    display: none;
}

/* Abaixo deste, adicionaremos o seletor do nav__item_form, dentro do qual aumentaremos 
o espaço do campo de digitação. Como o item da lista é um filho direto do flex-container, 
podemos usar a propriedade flex para indicar quantos espaços ele deve ocupar.
Adicionaremos a ele o valor 2, que é suficiente para aumentar a largura do espaço do campo de digitação.
Já sabemos que o display: flex define um valor fixo para a propriedade flex. No código acima, 
apenas dobramos esse valor para aumentar o espaço que queremos ocupar. */

.nav__item_form {
    flex: 2;
}

/* 
realizaremos o espaçamento entre os ícones do carrinho e do perfil. 
Adicionando o seletor do nav__icons, utilizaremos o display: flex mesmo com elementos 
lado a lado para possibilitar o uso da propriedade gap, que realiza o espaçamento entre os ícone.
Por fim, definiremos esse gap com a var(--gap-l). */

.nav__icons {
    display: flex;
    gap: var(--gap-l);
}

/* -- Layout para tablet com media query -- 
O gap normal faz um espaçamento entre cada item, 
enquanto o row-gap faz o espaçamento entre linhas.
existe o column-gap, que faz o espaçamento entre colunas. 
Feito isso, podemos utilizar o seletor .nav__item_form, onde faremos a divisão do cabeçalho
 em duas linhas. Primeiramente, substituiremos o valor de flex para 1 1 100%.
Em seguida, definiremos um text-align com o valor center e um order de 1. 
A propriedade flex com vários valores funciona como uma abreviação na utilização do flex-grow, do flex-shrink,
 e do flex-basis, propriedades que ajudam no posicionamento dos elementos no contêiner. 
 Já a propriedade order define a ordem em que o flex item será renderizado dentro do flex container. 
 Se não definirmos nenhum order, todos os itens serão definidos como zero.
Quando estabelecemos order: 1, o item tem um número maior que os outros, 
então ele vai para o final do contêiner e, por isso, o posicionamento o mantém na segunda linha.
-- O último passo para esse tipo de layout será adicionar um espaçamento entre o cabeçalho e as extremidades,
 direita e esquerda. Para isso, no seletor .header, teremos um padding de 0 var(--padding-xxl).
  Não queremos nenhum espaçamento em cima e embaixo, mas um espaçamento grande entre os cantos. 
Dessa forma, o conteúdo não encostará mais nas laterais da tela.*/

@media screen and (max-width: 1200px) {
    .nav__list {
        row-gap: var(--gap-l);
        gap: var(--gap-s);
    }
    .nav__item_form {
        flex: 1 1 100%;
        text-align: center;
        order: 1;
    }
    .header {
        padding: 0 var(--padding-xxl);
    }

}

/* --- layout para dispositivos móveis 
No layout mobile, criaremos uma nova media query com @media screen and (max-width: 730px).
Feito isso, a primeira estilação que vamos construir será no seletor .nav__link, 
com a propriedade display: none, responsável por fazer todos os links desaparecerem.
 Quando chegamos abaixo de 730px, os links não aparecem mais, pois eles devem estar dentro do menu hambúrguer.

Dito isso, vamos exibir o menu hambúrguer. Chamando a classe .menu__toggle,
 adicionaremos as propriedades display: block e cursor: pointer.
 Dessa forma, os links somem do cabeçalho e são exibidos no menu do canto superior esquerdo. 
 
 Dando continuidade à estilização, vamos diminuir o tamanho do padding de .header para 0 var(--padding-m).
  Além disso, vamos estilizar o .menu__toggle__icon, pois, atualmente, ele possui uma cor de fundo cinza,
   que é o padrão dos estilos de botões.   Para remover isso, usaremos a propriedade background-color
    definida como transparent, e uma border com o valor none.*/

@media screen and (max-width: 730px) {
    .nav__link {
        display: none;
    }
     .menu__toggle {
        display: block;
        cursor: pointer;
    }
    
    .header {
        padding: 0 var(--padding-m);
    }

    .menu__toggle__icon {
        background-color: transparent;
        border: none;
    }
}
    
